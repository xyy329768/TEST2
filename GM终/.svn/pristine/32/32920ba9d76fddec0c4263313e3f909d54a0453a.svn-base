package com.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.dao.inter.ProductDao;
import com.util.ConnOracleDataSourceTransaction;
import com.util.ConnectOracle;
import com.vo.Category2;
import com.vo.Product;

public class ProductDaoImpl implements ProductDao {

	// 组合Connection对象
	private Connection conn;

	public ProductDaoImpl() {
		conn = ConnectOracle.getConnection();
	}

	
	@Override
	public int addProduct(Product product) throws Exception{
		//刚刚插入的商品处于"下架"状态 所以onsale 的值为0    1 表示上架   0 表示下架
		String sql = "insert into product(pid,pname,price,pingjiasum,productSum,dianpuName,pdesc,onsale,sfid) values(seq_product.nextval,?,?,0,?,?,?,0,?)";
		PreparedStatement pstmt = null;
		// 三.建立通道
		int count = 0;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, product.getPname());
			pstmt.setDouble(2, product.getPrice());
			pstmt.setInt(3, product.getProductSum());
			pstmt.setString(4, product.getDianpuName());
			pstmt.setString(5, product.getPdesc());
			pstmt.setInt(6, product.getCid());
			// 四.执行并返回结果集
			count = pstmt.executeUpdate();
			
		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("添加商品失败");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(null, pstmt, conn);

		}
		
		return count;

	}

	@Override
	public int deleteProduct(Product product) throws Exception{
		String sql = "delete from product where pid=?";
		PreparedStatement pstmt = null;
		// 三.建立通道
		int count = 0;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, product.getPid());

			// 四.执行并返回结果集
			count = pstmt.executeUpdate();// 执行dml 或 ddl语句的 返回受影响的行数
			

		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("删除商品失败!");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(null, pstmt, conn);
		}

		return count;
	}

	// 三.修改
	public int updateProduct(Product product) throws Exception {
		conn = ConnOracleDataSourceTransaction.getConnection();
		String sql = "update product set pname=?,price=? ,productSum=?,dianpuName =? ,sfid=? where pid=?";
		
		PreparedStatement pstmt = null;
		// 三.建立通道
		int count = 0;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, product.getPname());
			pstmt.setDouble(2, product.getPrice());
			pstmt.setInt(3, product.getProductSum());
			pstmt.setString(4,product.getDianpuName());
			pstmt.setInt(5,(int)product.getCid());
			pstmt.setInt(6, (int) product.getPid());
			
			// 四.执行并返回结果集
			count = pstmt.executeUpdate();// 执行dml 或 ddl语句的 返回受影响的行数
			
		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("修改商品失败!");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(null, pstmt, conn);

		}

		return count;
	}
	
	public int updateProductUpDown(Product product) throws Exception {
		String sql = "update product set onsale=? where pid = ?";
		
		PreparedStatement pstmt = null;
		// 三.建立通道
		int count = 0;
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1,(int)product.getOnsale());
			pstmt.setInt(2, (int) product.getPid());
			
			// 四.执行并返回结果集
			count = pstmt.executeUpdate();// 执行dml 或 ddl语句的 返回受影响的行数
			
		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("修改商品失败!");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(null, pstmt, conn);

		}

		return count;
	}

	// 四.查1
	public Product getProductById(Integer pid) throws Exception{
		Product product = new Product();
		List<Product> list = new ArrayList<Product>();

		String sql = "select * from product where pid=?";
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		// 三.建立通道
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, pid);

			// 四.执行并返回结果集
			rs = pstmt.executeQuery();
			while (rs.next()) {
				product.setCid(rs.getInt("sfid"));
				product.setPid(rs.getInt("pid"));
				product.setPrice(rs.getInt("price"));
				product.setPname(rs.getString("pname"));
				product.setPdesc(rs.getString("pdesc"));
				product.setProductSum(rs.getInt("productSum"));
				product.setDianpuName(rs.getString("dianpuName"));
				list.add(product);
			}

		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("查询单一商品失败!");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(rs, pstmt, conn);

		}

		return product;
	}

	// 五.按SQL语句查
	public List<Product> getPageByQuery(String sql) throws Exception {
		Statement stmt = null;
		ResultSet rs = null;

		List<Product> list = new ArrayList<Product>();

		Product product = null;
		Category2 category = null;
		// 三.建立通道
		try {
			stmt = conn.createStatement();
			// 四.执行并返回结果集
			rs = stmt.executeQuery(sql);

			while (rs.next()) {
				product = new Product();
				category = new Category2();
				product.setPid(rs.getInt("pid"));
				product.setPrice(rs.getInt("price"));
				product.setPname(rs.getString("pname"));
				product.setPdesc(rs.getString("pdesc"));
				product.setProductSum(rs.getInt("productSum"));
				product.setDianpuName(rs.getString("dianpuName"));
				product.setOnsale(rs.getInt("onsale"));
				category.setCname(rs.getString("sname"));
				product.setCategory(category);
				
				list.add(product);
			}

		} catch (SQLException e) {
			System.out.println("建立通道失败!");
			e.printStackTrace();
			throw new Exception("查询商品失败!");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(rs, stmt, conn);
		}

		return list;
	}

	
	
	public int getTotalRecordSum(String sql) throws Exception{
		int totalRecordSum = 0;

		PreparedStatement pstmt = null;
		ResultSet rs = null;

		try {
			pstmt = conn.prepareStatement(sql);
			
			rs = pstmt.executeQuery();
			while (rs.next()) {
				totalRecordSum = rs.getInt(1);
			}

		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("查询商品数量失败!");
		} finally {
		
			ConnectOracle.closeConnection(rs, pstmt, conn);
		}

		return totalRecordSum;
	}
	public void updateProductImageNames(Product product) throws Exception{
		String sql = "update product set productListLargeImage1=?,productListLargeImage2=?,productListLargeImage3=?,productListSmallImage1=?,productListSmallImage2=?,productListSmallImage3=?,detailLargeImg1=?,detailLargeImg2=?,detailLargeImg3=?,detailLargeImg4=?,detailLargeImg5=?,detailSmallImg1=?,detailSmallImg2=?,detailSmallImg3=?,detailSmallImg4=?,detailSmallImg5=?,shoppingCarImg=? where pid=?";
		PreparedStatement pstmt = null;
		// 三.建立通道
		try {
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, product.getProductListLargeImage1());
			pstmt.setString(2, product.getProductListLargeImage2());
			pstmt.setString(3, product.getProductListLargeImage3());
			pstmt.setString(4, product.getProductListSmallImage1());
			pstmt.setString(5, product.getProductListSmallImage2());
			pstmt.setString(6, product.getProductListSmallImage3());
			
			
			//设置 详细页图片字段
			pstmt.setString(7, product.getDetailLargeImg1());
			pstmt.setString(8, product.getDetailLargeImg2());
			pstmt.setString(9, product.getDetailLargeImg3());
			pstmt.setString(10, product.getDetailLargeImg4());
			pstmt.setString(11, product.getDetailLargeImg5());
			pstmt.setString(12, product.getDetailSmallImg1());
			pstmt.setString(13, product.getDetailSmallImg2());
			pstmt.setString(14, product.getDetailSmallImg3());
			pstmt.setString(15, product.getDetailSmallImg4());
			pstmt.setString(16, product.getDetailSmallImg5());
			
			//设置 购物车图片字段
			pstmt.setString(17, product.getShoppingCarImg());
			
			pstmt.setInt(18, product.getPid());
			// 四.执行并返回结果集
			int count = pstmt.executeUpdate();// 执行dml 或 ddl语句的 返回受影响的行数
			
		} catch (SQLException e) {
			System.out.println("建立通道失败");
			e.printStackTrace();
			throw new Exception("修改商品图片失败");
		} finally {
			// 五.关闭
			ConnectOracle.closeConnection(null, pstmt, conn);
		}

	}
	
	public static void main(String[] args) throws Exception {
		Product p = new Product();
		p.setPname("iphone6s");
		p.setPrice(5288);
		p.setProductSum(10);
		p.setDianpuName("京东Apple产品专营店");
		p.setPdesc("苹果最新手机");
		p.setCid(62);
		ProductDaoImpl dao = new ProductDaoImpl();
		dao.addProduct(p);
	}


	



	

}
